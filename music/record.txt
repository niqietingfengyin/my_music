1.highLight.js为了在导航栏添加当前页的标记，即如果处在‘Home’页面，则给<a href='index.html'>Home</a>添加一个类名here，然后在color.css中给具有这个类的标签特殊的样式，表明处在当页面；
这里没有用自定义函数addClass，而是直接给元素的className属性赋值即可：link[i].className='here';
因为javascript允许我们为元素创建属性，element.variable=value;

为了给每个页面不同的背景图片及当前页面对应导航项的背景色，利用highLight.js，为当前项的<a>元素添加类属性'here'，并给<header>元素添加一个id,id值为<a>元素中的文本，这个id可以当做随页面变化的'挂钩'；
'here'属性为当前页面提供’挂钩‘,color.css中用挂钩定位，给导航里的相应项修改背景色，与其他项区别；
在layout.css中用id定位给相应元素添加不同背景图片；

2.home主页中的动画效果，调用pshow.js和moveElement.js，用getElementsByTagName('a')定位所有的<a>标签，然后getAttribute属性，用indexOf()判断其中是否含有‘index.html’,'about.html','live.html'等字符串，这些字符串确定元素移动的位置finalx,finaly,如果含有则调用相应的moveElement(elemId,finalx,finaly,interval）；为了防止setTimeout()队列出现累积事件导致图片颤动，可以人为给图片元素添加move属性，如果该属性存在，则先用clearTimeout()函数清楚队列，保证setTimeout（）每次只执行一个事件；

3.about.html页面中的点击显示某一段的效果：
在about.html建立‘挂钩’<li><a href='#id'></a></li>链接的地址是下面对应段落的id<section id='id'></section>,遍历所有链接之后，可分别提取对应的id,然后遍历section的id,如果与链接提取的id相同，则修改elem.style.display='block'/'none';
prepare.js即遍历<li>找到链接的对应id,并调用showElment(id)函数；
showElement.js中定义showElement()函数，用来遍历<section>找到与id一致的段落，修改display即可；

注意：prepare.js中遍历每个链接的id时，该id是局部变量，因此links[i].onclick回调函数中如果调用id，需要用到闭包；
当然，也可以不用闭包，而是把id赋给元素的自定义属性，属性的作用域是持久的；

about.html页面用的<section id='jay'>比较多，为了可以整段显示或者整段隐藏；

4.photos.html主要用到了highLight.js保证导航栏中当前项的颜色也本页页面颜色一致；bigimage.js实现首先<div id='bigimage'></div>确定宽度和高度，容纳‘描述’和‘大图片’
然后在 <p id='description'></p>中添加文本节点，<img id='placeholder' />中添加文本src属性

其中如果<p id='description'></p>中没有文本节点，那么elem.firstChild.nodeValue将返回null错误，我们需要先给这个elem下建立一个子节点；
如果我们用elem.appendChild(document.createTextNode(this.description))，那么<p></p>下的文本会不断增加，而不是覆盖；

5.live.html页面主要包括两部分：表格和缩略词
表格格式<table>
           <thead>
             <tr><th></th></tr>
            </thead>
            <tbody>
              <tr><td></td></tr>
             </tbody>
         </table>
注意：在给表格每行添加各种效果时，对<tr>添加无效，必须是对<td>添加；
首先在color.css中<th>表头行添加颜色，然后是<tr><td>表格中添加颜色；
然后js中人为的为偶数行的<tr>添加一个类.odd，然后再color.css中定位到对应位置，修改改行颜色；
鼠标停到某一行，该行背景颜色变化也是通过这个原理实现，添加的类是‘now’;

其实为页面中某些位置添加样式有两种方式：
  1.在js中先建一个‘挂钩’，用来在css中定位到相应位置，然后再css中修改样式。例如：tr.now td { background-color:#ffb ;}或者 tr td:hover {  background-color:#ffb;}但是后者只是针对某个单元格变色，而不是针对某行；
   2.直接在js中用回调函数。例如：
links[i].onmouseover=function(){this.style.backgroundColor:#ffb;}
links[i].omnouseout=function(){this.style.backgroundColor:#ebc;}

缩略词格式:<dl>
              <dt>"OR"
                 <dd>Oregan</dd>
               </dt>
            </dl>
与下述的格式，展现在页面上式一样的：
      <dl>
         <dt>OR</dt>
         <dd>Oregan</dd>
      </dl>
             
6.contact.html页面用verify()验证表单中数据是否满足要求，其中包括verifyempty()验证是否为空，verifyreg()验证email格式是否满足正则表达式格式；如果是‘null’,则鼠标离开时（onblur）在相应<span>里显示‘Please input a value’，如果不满足格式，则显示‘you must input value same as...’,如果满足要求则什么都不显示；
这两个验证函数都包含参数，是为了能抽象换，每一次调用针对不一样的元素；
其中elem.value.replace(/\s/g,'').length是把elem中值去掉空格之后的长度，因为value只要有输入，且输入个数满足要求，即能通过验证，这样是防止只输入空格；
verifyreg()验证正则表达式，是用正则表达式的test()函数，自定义正则表达式regx，如果elem.value满足正则表达式样式，即返回满足部分，否则返回false；
格式：regx.text('elem.value')

注意：
        <p>
	  <label for='name1'>Name:</label>
	   <input type='text' id='name1' name='name' placeholder='your name' length='20'                maxlength='30' > 
	  <span id='namespan'></span>
	</p>
其中<label>可以用for属性标识一个<input>元素，但是没有onblur时间，如果在鼠标离开<input>时触发时间，需要定位到<input>元素，然后添加onblur事件；
<input>有个'placeholder'属性可以再输入框中出现默认的提示，requested='requested'属性保证该项不能为空；

用ajax请求的过程：
在主页加载ajax.js，这个文件自定义一个对象AjaxRequest,继承XMLHttpRequest()对象的主要属性、方法；
formatsubmit()函数开始，首先把AjaxRequest()实例化为ajaxReq；
document.forms[0].onsubmit即为表单添加事件，该函数返回false，可以阻止页面跳转；在返回之前，用ajaxReq.send('POST','thanks.html',postdatatype,postdata)发送请求，请求方式‘POST’，接受请求文件‘thanks.html’,处理请求过程函数handle,发送数据类型，发送数据;
其中handle最好作为子函数包含在formsubmit()函数中，因为局部变量可以继承使用；
如果请求是'POST'类型，一般是传送给服务器数据，接受文件如果是'.php'文件则该文件接受传来的数据进行处理，如果是'.html'则该文件被服务器返回给请求方；
如果请求'GET'类型，一般是从服务器获取数据，如果请求的文件时'.xml'文件，则ajaxReq.getResponseXML()获取文件，如果是'.html'文件，则ajaxReq.getResponseText()获得文件；


